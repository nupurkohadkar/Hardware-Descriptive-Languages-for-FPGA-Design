library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity FIFO8x9 is
   port(
      clk, rst:		in std_logic;
      RdPtrClr, WrPtrClr:	in std_logic;    
      RdInc, WrInc:	in std_logic;
      DataIn:	 in std_logic_vector(8 downto 0);
      DataOut: out std_logic_vector(8 downto 0);
      rden, wren: in std_logic
	);
end entity FIFO8x9;

architecture RTL of FIFO8x9 is
	--signal declarations
	type fifo_array is array(7 downto 0) of std_logic_vector(8 downto 0);  -- makes use of VHDLâ€™s enumerated type
	signal fifo:  fifo_array;
	signal wrptr, rdptr: unsigned(2 downto 0);
	signal en: std_logic_vector(7 downto 0);
	signal dmuxout: std_logic_vector(8 downto 0);

begin

dmuxout<= fifo(to_integer(rdptr)) when (rden='1');

output: process (clk,rst)
begin 
if(clk'event and clk='1') then
if(rden='1') then
Dataout<=dmuxout;
else
Dataout<=(others=>'Z');
end if;
end if;
end process output;

         
process(clk,rst)
begin

if rst = '1' then
for i in 7 downto 0 loop
fifo(i) <= (others => '0');
end loop;
elsif(clk'event and clk='1') then
   if(wren='1') then
   fifo(to_integer(wrptr))<= DataIn;
   en(to_integer(wrptr))<='1';
   end if;

end if;
end process;


write :process(clk,rst)
begin
if rst = '1' then
wrptr<=(others=>'0');
elsif(clk'event and clk='1') then
  if(WrPtrClr='1') then
  wrptr<=(others=>'0');
  elsif(WrInc='1') then
      wrptr<=wrptr+1;
  end if;

end if;
end process write;

read :process(clk,rst)
begin

if rst = '1' then
 rdptr<=(others=>'0');
elsif(clk'event and clk='1') then
 if(RdPtrClr='1') then
  rdptr<=(others=>'0');
  elsif(RdInc='1') then
      rdptr<=rdptr+1;
  end if;


end if;
end process read;



end RTL;